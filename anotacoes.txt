antes de usar o comando bin/setup para baixar os scripts do projeto

ir na pasta bin abrir o arquivo setup e descomentar o código system('bin/yarn') para ele baixar automaticamente os pacotes do yarn. (neste projeto já fiz isso)




Dicas de Teste no spec

#criar pasta chamada features e colocar os testes lá, não esquecer de colocar o _spec no final do nome do arquivo
# cada teste é dividido em 3 partes
# os 3 A's, arrange, act e assert
# 3 A's, prepara, executa e valida (prepara os dados, executa com eles e valida eles)

#colocar nos testes coisas que não era para aparecer para ver se realmente não aparece

#teste de feature testa o conjunto funcionando
#testes unitarios -> testes para todos os casos ex. se numero negativo da certo, se zero da certo...

# para não ficar repetindo código ir a pasta rails_helper, decomentar a linha 23 e criar uma pasta support no rspec.
#dentro dessa pasta criar um arquivo rb e colcoar a função que faça o código que repita muito

Dicas de Código

#método .all -> retorna um array vazio então da para usar metodos na resposta dele ex CarCategory.all. CarCategory.empty?

#o método .find -> retorna nil. então não da para usar metodos na resposta dele. teria que fazer de um jeito diferente ex: CarCategory == 'nil'

#método redirect_back(fallback_location: root_path) usado no link_to ex <%= link_to 'voltar', redirect_back(fallback_location: root_path) %> volta para o 
#ultimo site que visitou, mas pode voltar também para um site de fora do seu site, usar o allow_other_host: false -> faz ele não voltar para sites de fora.

#number_to_currency é um método que converte um valor para umna moeda e converte valor, deixa no formato certo.
#I18N -> internacionalization = é como você diz como uma aplicação está rodando em espanhol ou italiano ou ingles, etc
#permite fazer as traduções

# tanto :var quanto var: são symbols

#métodos com bang "!" deixa as funções mais explicita. 
#ex. upcase! troca string que você usou o upcase
#create! só cria se ele conseguir, se as validações passarem, se não ele quebra e manda erro.
#no controler não costumamos usar metodos com bang.

#para mostrar coisas no rails podemos usar o flash

# todas as classes, new, create, show tem uma função render :new, render :create, mas tudo oculto, você pode explicitar para ele exibir

# problemas de autenticação é resolvido nos controllers


Dicas de BD

#banco_de_dados.first -> retorna primeira linha do bd

#rake db:reset -> reseta todos os bds

#Dicas de verbos get/post...
#Links por padrão disparam requisições do tipo GET 
#Essas requisições NÃO devem alterar nada no banco de dados 
#Pra isso temos os métodos/verbos POST, DELETE...



Dicas do devise

#Devise cria estrutura de login para a aplicação.
#primeiro add devise para gem -> gem 'devise'
# depois executar -> bundle install e em sequencia -> rails generate devise:install
# depois criar omodel -> rails generate devise nome_do_model user:string id: int e por fim ->rails db:migrate
#caso você tenha esquecido algum campo no migrate para adicionar depois dele já ter sido gerado 
# -> rails generate migration add_name_to_user name:string aonde o name é o campo que você quer adicionar e user é o nome do model.
#depois usar o db:migrate.
#para exibir a ciew rodar rails generate devise:views
#para pegar a tradução do i18n acessar o site abaixo.
#https://raw.githubusercontent.com/tigrish/devise-i18n/master/rails/locales/pt-BR.yml#não é recomendado colocar os controllers do devise
#já que nele tem coisas como cryptografia
#ele gera dois metodos para usar em qualquer controler e em qualquer view
# 1º -> MODEL_signed_in? aonde model é o nome do model ex user.
# ou também -> admin_signed_in?
# 2º current_Model -> model é o nome do model, esse método retorna o objeto(quem está logado) ou nil 
# se você quser tirar alguma função do devise, ex registrar, tem que remover do modulo 
# A rota para deslogar do devise é o delete_session
# devise tem um before_action :authenticate_user! para verificar se o usuario está logado
# outro jeito para testar autenticação é criando uma pasta no support e jogando essa linha -> include Warden::Test::Helpers
# esse comando permite usar o seguinte código -> login_as(user, :scope => :user) que já cria um usuario (aainda é necessario criar no bd o user)

